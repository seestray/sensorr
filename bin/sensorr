#!/usr/bin/env node
require('./utils/polyfill')

const fs = require('fs')
const path = require('path')
const PouchDB = require('pouchdb')
const Database = require('@shared/Database')
const Sensorr = require('@shared/Sensorr')
const studio = require('@studio/log')
const StringifyTransform = require('@studio/ndjson/stringify')
const Transform = require('stream').Transform
const uuidv1 = require('uuid/v1')
const uuidv4 = require('uuid/v4')
const config = require('@config/config.json')
const commands = require('@bin/commands')
const { header } = require('@bin/utils/layout')
const { version, help } = require('@bin/utils/args')
const { _, ...argv } = require('minimist')(process.argv.slice(2))


PouchDB.plugin(require('pouchdb-find'))

async function main() {
  const log = console.error

  await header({ argv, log })

  if (argv.v || argv.version) {
    await version({ argv, log })
    await exit(0)
  } else if (argv.h || argv.help || !Object.keys(commands).includes(_[0])) {
    await help({ argv, log })
    await exit(0)
  } else {
    const session = uuidv1()
    const logger = studio('sensorr')
    const sensorr = new Sensorr({
      ...config,
      ...({
        ...((argv.b && { blackhole: argv.b }) || (argv.blackhole && { blackhole: argv.blackhole }) || {}),
        ...((argv.f && { filter: argv.f }) || (argv.filter && { filter: argv.filter }) || {}),
        ...((argv.s && { sort: argv.s }) || (argv.sort && { sort: argv.sort }) || {}),
        ...((argv.d && { descending: argv.d }) || (argv.descending && { descending: argv.descending }) || {}),
      })
    })

    const db = await new Database({
      name: `http://localhost:${parseInt(argv.p || argv.port || 5070)}/db`,
      auth: sensorr.config.auth
    }).get(Database._POUCHDB)

    logger.init = () => studio
      .pipe(new Transform({
        readableObjectMode: true,
        writableObjectMode: true,
        transform: (obj, encoding, callback) => callback(null, { ...obj, uuid: uuidv4() })
      }))
      .pipe(new StringifyTransform())
      .pipe(fs.createWriteStream(path.join(__dirname, '.sessions', '..', `${session}-${_[0]}.log`), { flags: 'a' }))

    await commands[_[0]]({ argv, log, session, logger, sensorr, db })
    await exit(0)
  }

  async function exit(code = 0, now = false) {
    if (now) {
      process.exit(code)
    } else {
      process.exitCode = code
    }
  }
}

main()
